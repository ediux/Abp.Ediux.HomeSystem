@using Ediux.HomeSystem.Models.DTOs.FCM
@model FCMSettingsDTO
<script type="module">   
    // Import the functions you need from the SDKs you need
    import { initializeApp } from 'https://www.gstatic.com/firebasejs/@(Model.FCMVersion)/firebase-app.js';
    import { getAnalytics } from 'https://www.gstatic.com/firebasejs/@(Model.FCMVersion)/firebase-analytics.js';
    import { getMessaging, getToken, onMessage } from 'https://www.gstatic.com/firebasejs/@(Model.FCMVersion)/firebase-messaging.js';

    const firebaseConfig = {
        apiKey: "@(Model.apiKey)",
        authDomain: "@(Model.authDomain)",
        projectId: "@(Model.projectId)",
        storageBucket: "@(Model.storageBucket)",
        messagingSenderId: "@(Model.messagingSenderId)",
        appId: "@(Model.appId)",
        measurementId: "@(Model.measurementId)"
    };

    // Initialize Firebase
    const app = initializeApp(firebaseConfig);
    const analytics = getAnalytics(app);

    const messaging = getMessaging(app);

    // 接收到通知時
    onMessage(messaging, (payload) => {
        abp.log.info('Message received. ');
        // Update the UI to include the received message.
        appendMessage(payload);
    });

    function resetUI() {
        // Get registration token. Initially this makes a network call, once retrieved
        // subsequent calls to getToken will return from cache.
        getToken(messaging, { vapidKey: '@(Model.vapidKey)' })
        .then((currentToken) => {
                if (currentToken) {
                sendTokenToServer(currentToken);
                } else {
                // Show permission request.
                abp.log.info('No registration token available. Request permission to generate one.');
                // Show permission UI.
                setTokenSentToServer(false);
                }
            }).catch((err) => {            
                abp.log.error('An error occurred while retrieving token. '+err);
                abp.message.error('An error occurred while retrieving token. '+err);
            });

    }

    // Send the registration token your application server, so that it can:
    // - send messages back to this app
    // - subscribe/unsubscribe the token from topics
    function sendTokenToServer(currentToken) {
        if (!isTokenSentToServer()) {
            abp.log.info('Sending token to server...');
            ediux.homeSystem.notification.notification.registerUserToken(currentToken)
                .then(result=>{
                    setTokenSentToServer(true);
                }).catch(err=>{
                    abp.message.error('註冊失敗請檢查相關設定.'+err);
                });
        } else {
            abp.log.info('Token already sent to server so won\'t send it again ' +
                'unless it changes');
        }
    }

    function isTokenSentToServer() {
        return window.localStorage.getItem('sentToServer') === '1';
    }

    function setTokenSentToServer(sent) {
        window.localStorage.setItem('sentToServer', sent ? '1' : '0');
    }

    function requestPermission() {
        abp.log.info('Requesting permission...');
        Notification.requestPermission().then((permission) => {
            if (permission === 'granted') {
                abp.log.info('Notification permission granted.');
                resetUI();
            } else {
                abp.log.info('Unable to get permission to notify.');
            }
        });
    }

    // Add a message to the messages element.
    function appendMessage(payload) {
        const notifyMsg = payload.notification;

        abp.notify.info(
            notifyMsg.body,
            notifyMsg.title
        );   
    }

    toastr.options.positionClass = 'toast-top-right';
    resetUI();
    
</script>