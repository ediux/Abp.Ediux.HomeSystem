@using Ediux.HomeSystem.AdditionalSystemFunctions4Users
@using Ediux.HomeSystem.Localization
@using Ediux.HomeSystem.SystemManagement
@using Microsoft.Extensions.Localization
@using System.IO
@using Volo.Abp.AspNetCore.Components.Web
@using Blazorise.TreeView
@using Volo.Abp.Guids
@inject AbpBlazorMessageLocalizerHelper<HomeSystemResource> LH
@inherits HomeSystemCrudPageBase<IFileStoreAppService, FileStoreDto, Guid, FileStoreSearchRequestDto, FileStoreDto>
<Container Fluid Margin="Margin.Is0" Padding="Padding.Is0">
    <Row Style="height:7vh;" Margin="Margin.Is0" Padding="Padding.Is0">
        <Column ColumnSize="ColumnSize.Is12.OnMobile.Is7.OnTablet.Is8.OnDesktop" Padding="Padding.Is2">
            <Heading Size="HeadingSize.Is4">@(FileClassification?.Name)</Heading>
        </Column>
        <Column ColumnSize="ColumnSize.Is12.OnMobile.Is5.OnTablet.Is4.OnDesktop" Margin="Margin.Is0" Padding="Padding.Is2">
            <Button Color="Color.None" Float="Float.Right" Border="Border.Is1" title="Refresh" Size="Size.Medium" Visibility="@btnRefreshVisibility" Clicked="@RefreshClick"><Icon Name="IconName.Redo" /></Button>
            <Button Color="Color.None" Float="Float.Right" Border="Border.Is1" title="Delete File" Size="Size.Medium" Visibility="@btnDeleteFileVisibility" Clicked="@DeleteFilesClick"><Icon Name="IconName.Delete" /></Button>
            <Button Color="Color.None" Float="Float.Right" Border="Border.Is1" title="Rename File" Size="Size.Medium" Visibility="@btnReuploadFileVisibility" Clicked="@EditFilesClick"><Icon Name="IconName.FileUpload" /></Button>
            <Button Color="Color.None" Float="Float.Right" Border="Border.Is1" title="Add Files" Size="Size.Medium" Visibility="@btnAddFileVisibility" Clicked="OpenCreateModalAsync"><Icon Name="IconName.Add" /></Button>
        </Column>
    </Row>
    <Row Style="height:85vh" Margin="Margin.Is0" Padding="Padding.Is0">
        <Column ColumnSize="ColumnSize.Is12" Background="Background.Secondary" Margin="Margin.Is0" Padding="Padding.Is2">
            <DataGrid TItem="FileStoreDto"
                      Data="@Entities"
                      PageSize="15"
                      SelectedRow="@selectedFile"
                      SelectedRowChanged="SelectedSignalFileChanged"
                      SelectionMode="DataGridSelectionMode.Multiple"
                      SelectedRows="@selectedFiles"
                      SelectedRowsChanged="SelectedFilesChanged"
                      Responsive Virtualize>
                <DataGridMultiSelectColumn TItem="FileStoreDto" Width="30px"></DataGridMultiSelectColumn>
                <DataGridColumn TItem="FileStoreDto" Field="@nameof(FileStoreDto.Name)" Caption="@L[HomeSystemResource.Features.Files.DTFX.Columns.Name]" Editable />
                <DataGridColumn TItem="FileStoreDto" Field="@nameof(FileStoreDto.ExtName)" Caption="@L[HomeSystemResource.Features.Files.DTFX.Columns.ExtName]" Editable />
                <DataGridColumn TItem="FileStoreDto" Field="@nameof(FileStoreDto.Size)" Caption="@L[HomeSystemResource.Features.Files.DTFX.Columns.Size]" Readonly />
                <DataGridColumn TItem="FileStoreDto" Field="@nameof(FileStoreDto.Description)" Caption="@L[HomeSystemResource.Features.Files.DTFX.Columns.Description]" Editable>
                </DataGridColumn>
                <DataGridColumn TItem="FileStoreDto" Field="@nameof(FileStoreDto.MIMETypes.Description)" Caption=@L[HomeSystemResource.Features.Files.DTFX.Columns.ContentType] Readonly />
                <DataGridDateColumn TItem="FileStoreDto"
                                    Field="@nameof(FileStoreDto.CreatorDate)"
                                    Caption="@L[HomeSystemResource.Common.Fields.CreationTime]">
                    <DisplayTemplate>
                        @context.CreatorDate.ToLongDateString()
                    </DisplayTemplate>
                </DataGridDateColumn>
                <DataGridDateColumn TItem="FileStoreDto"
                                    Field="@nameof(FileStoreDto.ModifierDate)"
                                    Caption="@L[HomeSystemResource.Common.Fields.LastModificationTime]">
                    <DisplayTemplate>
                        @(context.ModifierDate?.ToLongDateString() ?? string.Empty)
                    </DisplayTemplate>
                </DataGridDateColumn>
            </DataGrid>
        </Column>
    </Row>
</Container>
<Modal @ref="@CreateModal">
    <ModalContent IsCentered="true">
        <Form>
            <ModalHeader>
                <ModalTitle>@L[HomeSystemResource.Common.Caption.AddRecord_Formated,L[HomeSystemResource.Features.Files.Prefix]]</ModalTitle>
                <CloseButton Clicked="CloseCreateModalAsync" />
            </ModalHeader>
            <ModalBody>
                <Field>
                    <FieldLabel>@L[HomeSystemResource.Features.Files.DTFX.Columns.UploadFiles]</FieldLabel>
                    <FileEdit Multiple Changed="@OnFileUploadChanged" MaxFileSize="681574400" />
                </Field>
                <Field>
                    <Switch TValue="bool" @bind-Checked="@NewEntity.IsPublic">@L[HomeSystemResource.Common.Public]</Switch>
                </Field>
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary"
                        Clicked="CloseCreateModalAsync">
                    @L[HomeSystemResource.Buttons.Cancel]
                </Button>
                <Button Color="Color.Primary"
                        Type="@ButtonType.Submit"
                        PreventDefaultOnSubmit="true"
                        Clicked="CreateEntityAsync">
                    @L[HomeSystemResource.Buttons.Save]
                </Button>
            </ModalFooter>
        </Form>
    </ModalContent>
</Modal>
<Modal @ref="@EditModal">
    <ModalContent IsCentered="true">
        <Form>
            <ModalHeader>
                <ModalTitle>@(EditingEntity.Name+EditingEntity.ExtName)</ModalTitle>
                <CloseButton Clicked="CloseEditModalAsync" />
            </ModalHeader>
            <ModalBody>
                <Validations @ref="@EditValidationsRef" Model="@EditingEntity" ValidateOnLoad="false">
                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L[HomeSystemResource.Features.Files.DTFX.Columns.Name]</FieldLabel>
                            <TextEdit @bind-Text="@EditingEntity.Name">
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </TextEdit>
                        </Field>
                        <Field>
                            <FieldLabel>@L[HomeSystemResource.Features.Files.DTFX.Columns.ExtName]</FieldLabel>
                            <TextEdit @bind-Text="@EditingEntity.ExtName">
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </TextEdit>
                        </Field>
                        <Field>
                            <FieldLabel>@L[HomeSystemResource.Features.Files.DTFX.Columns.Description]</FieldLabel>
                            <TextEdit @bind-Text="@EditingEntity.Description">
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </TextEdit>
                        </Field>
                        <Field>
                            <FieldLabel>@L[HomeSystemResource.Features.Files.DTFX.Columns.UploadFiles]</FieldLabel>
                            <FileEdit Multiple Changed="@OnFileUploadChanged" MaxFileSize="681574400" />
                        </Field>
                    </Validation>
                </Validations>
                <Field>
                    <Switch TValue="bool" @bind-Checked="@EditingEntity.IsPublic">@L[HomeSystemResource.Common.Public]</Switch>
                </Field>
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary"
                        Clicked="CloseEditModalAsync">
                    @L[HomeSystemResource.Buttons.Cancel]
                </Button>
                <Button Color="Color.Primary"
                        Type="@ButtonType.Submit"
                        PreventDefaultOnSubmit="true"
                        Clicked="UpdateEntityAsync">
                    @L[HomeSystemResource.Buttons.Save]
                </Button>
            </ModalFooter>
        </Form>
    </ModalContent>
</Modal>
@code {

    [Parameter]
    public FileClassificationDto FileClassification { get; set; }

    [Parameter]
    public EventCallback<FileClassificationDto> FileClassificationChanged { get; set; }

    [Inject]
    public IGuidGenerator GuidGenerator { get; set; }

    protected Visibility btnAddFileVisibility = Visibility.Visible;
    protected Visibility btnReuploadFileVisibility = Visibility.Invisible;
    protected Visibility btnDeleteFileVisibility = Visibility.Invisible;
    protected Visibility btnRefreshVisibility = Visibility.Invisible;

    private FileStoreDto selectedFile;
    private List<FileStoreDto> selectedFiles;
    private List<FileStoreDto> createNewFiles = new List<FileStoreDto>();

    protected override async Task OnParametersSetAsync()
    {
        if (FileClassification == null)
        {
            btnAddFileVisibility = Visibility.Invisible;
            btnDeleteFileVisibility = Visibility.Invisible;
            btnReuploadFileVisibility = Visibility.Invisible;
            btnRefreshVisibility = Visibility.Visible;
        }
        else
        {
            btnAddFileVisibility = Visibility.Visible;
            btnDeleteFileVisibility = Visibility.Invisible;
            btnReuploadFileVisibility = Visibility.Invisible;
            btnRefreshVisibility = Visibility.Visible;
        }

        await GetEntitiesAsync();
        await base.OnParametersSetAsync();
    }


    protected override async Task GetEntitiesAsync()
    {
        if (FileClassification != null)
        {
            var result = await this.AppService.GetListAsync(new FileStoreSearchRequestDto()
                {
                    Classification_Id = FileClassification?.Id,
                    CurrentUser_Id = CurrentUser.Id
                });

            Entities = result.Items;
        }
        else
        {
            Entities = new List<FileStoreDto>();
        }
    }

    protected override async Task CreateEntityAsync()
    {
        if (createNewFiles.Count > 0)
        {
            foreach (var f in createNewFiles)
            {
                await AppService.CreateAsync(f);
            }
        }

        await base.CreateEntityAsync();
    }

    protected async Task SelectedSignalFileChanged(FileStoreDto item)
    {
        btnAddFileVisibility = Visibility.Visible;
        btnReuploadFileVisibility = Visibility.Visible;
        selectedFile = item;
        EditingEntity = selectedFile;

        if (EditingEntity != null)
        {
            EditingEntityId = EditingEntity.Id;
        }

        await InvokeAsync(StateHasChanged);
    }

    protected async Task SelectedFilesChanged(List<FileStoreDto> items)
    {
        btnAddFileVisibility = Visibility.Visible;
        btnReuploadFileVisibility = Visibility.Visible;
        selectedFiles = items;

        if (selectedFiles.Count >= 1)
        {
            EditingEntity = items[0];

            if (items[0] != null)
            {
                EditingEntityId = items[0].Id;
            }
        }

        await InvokeAsync(StateHasChanged);
    }

    protected async Task EditFilesClick()
    {
        if (selectedFile != null)
        {
            await OpenEditModalAsync(selectedFile);
        }
        else
        {
            if (selectedFiles != null && selectedFiles.Count > 0)
            {
                await OpenEditModalAsync(selectedFiles.First());
            }
            else
            {
                await Message.Error("請選擇檔案!");
            }
        }

        await InvokeAsync(StateHasChanged);
    }

    protected async Task DeleteFilesClick()
    {
        if (selectedFile != null)
        {
            await DeleteEntityAsync(selectedFile);
        }
        else
        {
            if (selectedFiles != null && selectedFiles.Count > 0)
            {
                for (int i = 0; i < selectedFiles.Count; i++)
                {
                    await DeleteEntityAsync(selectedFiles[i]);
                }
            }
            else
            {
                await Message.Error("請選擇檔案!");
            }
        }

        await InvokeAsync(StateHasChanged);
    }

    protected async Task RefreshClick()
    {
        await InvokeAsync(StateHasChanged);
    }

    protected async Task OnFileUploadChanged(FileChangedEventArgs e)
    {

        if (e.Files != null && e.Files.Length > 0)
        {
            IFileEntry fileEntry = null;
            createNewFiles.Clear();

            if (e.Files.Length > 1)
            {
                for (int i = 0; i < e.Files.Length; i++)
                {
                    fileEntry = e.Files[i];

                    if (i == 0)
                    {

                        NewEntity.Id = GuidGenerator.Create();
                        NewEntity.Name = Path.GetFileNameWithoutExtension(fileEntry.Name);
                        NewEntity.ExtName = Path.GetExtension(fileEntry.Name);
                        NewEntity.Classification = FileClassification;
                        NewEntity.Blob = new SystemManagement.BlobStoreObject()
                            {
                                BlobContainerName = "cms-kit-media"
                            };
                        NewEntity.Size = fileEntry.Size;
                        using (var stream = new MemoryStream())
                        {
                            // Here we're telling the FileEdit where to write the upload result
                            await fileEntry.WriteToStreamAsync(stream);

                            // Once we reach this line it means the file is fully uploaded.
                            // In this case we're going to offset to the beginning of file
                            // so we can read it.
                            stream.Seek(0, SeekOrigin.Begin);

                            // Use the stream reader to read the content of uploaded file,
                            // in this case we can assume it is a textual file.
                            NewEntity.Blob.FileContent = stream.ToArray();
                        }


                    }
                    else
                    {
                        FileStoreDto newFile = new FileStoreDto();

                        newFile.Id = GuidGenerator.Create();
                        newFile.Name = Path.GetFileNameWithoutExtension(fileEntry.Name);
                        newFile.ExtName = Path.GetExtension(fileEntry.Name);
                        newFile.Classification = FileClassification;
                        newFile.IsPublic = NewEntity.IsPublic;
                        newFile.Blob = new SystemManagement.BlobStoreObject()
                            {
                                BlobContainerName = "cms-kit-media",

                            };
                        newFile.Size = fileEntry.Size;
                        using (var stream = new MemoryStream())
                        {
                            // Here we're telling the FileEdit where to write the upload result
                            await fileEntry.WriteToStreamAsync(stream);

                            // Once we reach this line it means the file is fully uploaded.
                            // In this case we're going to offset to the beginning of file
                            // so we can read it.
                            stream.Seek(0, SeekOrigin.Begin);

                            // Use the stream reader to read the content of uploaded file,
                            // in this case we can assume it is a textual file.
                            newFile.Blob.FileContent = stream.ToArray();
                        }
                        createNewFiles.Add(newFile);
                    }
                }
            }
            else
            {
                fileEntry = e.Files[0];

                NewEntity.Id = GuidGenerator.Create();
                NewEntity.Name = Path.GetFileNameWithoutExtension(fileEntry.Name);
                NewEntity.ExtName = Path.GetExtension(fileEntry.Name);
                NewEntity.Classification = FileClassification;
                NewEntity.Blob = new SystemManagement.BlobStoreObject()
                    {
                        BlobContainerName = "cms-kit-media",
                    };
                NewEntity.Size = fileEntry.Size;

                using (var stream = new MemoryStream())
                {
                    // Here we're telling the FileEdit where to write the upload result
                    await fileEntry.WriteToStreamAsync(stream);

                    // Once we reach this line it means the file is fully uploaded.
                    // In this case we're going to offset to the beginning of file
                    // so we can read it.
                    stream.Seek(0, SeekOrigin.Begin);

                    // Use the stream reader to read the content of uploaded file,
                    // in this case we can assume it is a textual file.
                    NewEntity.Blob.FileContent = stream.ToArray();
                }
            }
        }
        await InvokeAsync(StateHasChanged);
    }
}
