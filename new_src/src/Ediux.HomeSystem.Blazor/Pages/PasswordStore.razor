@page "/PasswordStore"
@using Ediux.HomeSystem.AdditionalSystemFunctions4Users
@using Ediux.HomeSystem.Localization
@using Microsoft.Extensions.Localization
@using Volo.Abp.AspNetCore.Components.Web
@inject AbpBlazorMessageLocalizerHelper<HomeSystemResource> LH
@inject IStringLocalizer<HomeSystemResource> L
@inject IAuthorizationService authorizationService
@inherits AbpCrudPageBase<IPasswordStoreAppService, PasswordStoreDto, long, AbpSearchRequestDto, PasswordStoreDto>
<Card>
    <CardHeader>
        <Row Class="justify-content-between">
            <Column ColumnSize="ColumnSize.IsAuto">
                <h2>@L[HomeSystemResource.Features.PasswordBook.Prefix]</h2>
            </Column>
            <Column ColumnSize="ColumnSize.IsAuto">
                <Button Color="Color.Primary"
                        Clicked="OpenCreateModalAsync">
                    @L[HomeSystemResource.Buttons.Add]
                </Button>
            </Column>
        </Row>
    </CardHeader>
    <CardBody>
        <DataGrid TItem="PasswordStoreDto"
                  Data="Entities"
                  ReadData="OnDataGridReadAsync"
                  TotalItems="TotalCount"
                  ShowPager="true"
                  PageSize="PageSize">
            <DataGridColumns>
                <DataGridEntityActionsColumn TItem="PasswordStoreDto" @ref="@EntityActionsColumn">
                    <DisplayTemplate>
                        <EntityActions TItem="PasswordStoreDto" EntityActionsColumn="@EntityActionsColumn" >
                            <EntityAction TItem="PasswordStoreDto"
                                          Text="@L[HomeSystemResource.Buttons.Edit]"
                                          Clicked="() => OpenEditModalAsync(context)" />
                            <EntityAction TItem="PasswordStoreDto"
                                          Text="@L[HomeSystemResource.Buttons.Delete]"
                                          Clicked="() => DeleteEntityAsync(context)"
                                          ConfirmationMessage="() => GetDeleteConfirmationMessage(context)" />
                        </EntityActions>
                    </DisplayTemplate>
                </DataGridEntityActionsColumn>
                <DataGridColumn TItem="PasswordStoreDto"
                                Field="@nameof(PasswordStoreDto.SiteName)"
                                Caption="@L[HomeSystemResource.Features.PasswordBook.DTFX.Columns.SiteName]"></DataGridColumn>
                <DataGridColumn TItem="PasswordStoreDto"
                                Field="@nameof(PasswordStoreDto.SiteURL)"
                                Caption="@L[HomeSystemResource.Features.PasswordBook.DTFX.Columns.SiteURL]">
                </DataGridColumn>
                <DataGridColumn TItem="PasswordStoreDto"
                                Field="@nameof(PasswordStoreDto.LoginAccount)"
                                Caption="@L[HomeSystemResource.Features.PasswordBook.DTFX.Columns.LoginAccount]">
                </DataGridColumn>
                <DataGridColumn TItem="PasswordStoreDto"
                                Field="@nameof(PasswordStoreDto.Password)"
                                Caption="@L[HomeSystemResource.Features.PasswordBook.DTFX.Columns.Password]">
                    <DisplayTemplate>
                        @if (isAuth)
                        {
                            @context.Password
                        }
                        else
                        {
                            @("******")
                        }
                    </DisplayTemplate>
                </DataGridColumn>
                <DataGridColumn TItem="PasswordStoreDto"
                                Field="@nameof(PasswordStoreDto.ExtraProperties)"
                                Caption="@L[HomeSystemResource.Features.PasswordBook.DTFX.Columns.ExtraProperties]">
                    <DisplayTemplate>
                        @if (context.ExtraProperties != null && context.ExtraProperties.Count > 0)
                        {
                            string m = string.Empty;

                            foreach (var key in context.ExtraProperties.Keys)
                            {
                                if (m.IsNullOrWhiteSpace())
                                {
                                    m = $"{context.ExtraProperties[key]}";
                                }
                                else
                                {
                                    m += $"<br/>{context.ExtraProperties[key]}";
                                }
                            }

                            @((MarkupString)m)
                        }
                    </DisplayTemplate>
                </DataGridColumn>
                <DataGridDateColumn TItem="PasswordStoreDto"
                                    Field="@nameof(PasswordStoreDto.CreationTime)"
                                    Caption="@L[HomeSystemResource.Common.Fields.CreationTime]">
                    <DisplayTemplate>
                        @context.CreationTime.ToLongDateString()
                    </DisplayTemplate>
                </DataGridDateColumn>
                <DataGridDateColumn TItem="PasswordStoreDto"
                                    Field="@nameof(PasswordStoreDto.LastModificationTime)"
                                    Caption="@L[HomeSystemResource.Common.Fields.LastModificationTime]">
                    <DisplayTemplate>
                        @(context.LastModificationTime?.ToLongDateString() ?? string.Empty)
                    </DisplayTemplate>
                </DataGridDateColumn>
            </DataGridColumns>
        </DataGrid>
    </CardBody>
</Card>
<Modal @ref="@CreateModal">
    <ModalContent IsCentered="true">
        <Form>
            <ModalHeader>
                <ModalTitle>@L[HomeSystemResource.Common.Caption.AddRecord_Formated,L[HomeSystemResource.Features.PasswordBook.Prefix]]</ModalTitle>
                <CloseButton Clicked="CloseCreateModalAsync" />
            </ModalHeader>
            <ModalBody>
                <Validations @ref="@CreateValidationsRef" Model="@NewEntity" ValidateOnLoad="false">
                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L[HomeSystemResource.Features.PasswordBook.DTFX.Columns.SiteName]</FieldLabel>
                            <TextEdit @bind-Text="@NewEntity.SiteName">
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </TextEdit>
                        </Field>
                        <Field>
                            <FieldLabel>@L[HomeSystemResource.Features.PasswordBook.DTFX.Columns.SiteURL]</FieldLabel>
                            <TextEdit @bind-Text="@NewEntity.SiteURL">
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </TextEdit>
                        </Field>
                        <Field>
                            <FieldLabel>@L[HomeSystemResource.Features.PasswordBook.DTFX.Columns.LoginAccount]</FieldLabel>
                            <TextEdit @bind-Text="@NewEntity.LoginAccount">
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </TextEdit>
                        </Field>
                        <Field>
                            <FieldLabel>@L[HomeSystemResource.Features.PasswordBook.DTFX.Columns.Password]</FieldLabel>
                            <TextEdit @bind-Text="@NewEntity.Password" Role="TextRole.Password">
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>
                </Validations>
                <Field>
                    <Switch TValue="bool" @bind-Checked="@NewEntity.IsHistory">@L[HomeSystemResource.Features.PasswordBook.DTFX.Columns.IsHistory]</Switch>
                </Field>
                <Divider />
                <ExtraPropertyEditor TItem="PasswordStoreDto" Data="NewEntity"></ExtraPropertyEditor>
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary"
                        Clicked="CloseCreateModalAsync">
                    @L[HomeSystemResource.Buttons.Cancel]
                </Button>
                <Button Color="Color.Primary"
                        Type="@ButtonType.Submit"
                        PreventDefaultOnSubmit="true"
                        Clicked="CreateEntityAsync">
                    @L[HomeSystemResource.Buttons.Save]
                </Button>
            </ModalFooter>
        </Form>
    </ModalContent>
</Modal>
<Modal @ref="@EditModal">
    <ModalContent IsCentered="true">
        <Form>
            <ModalHeader>
                <ModalTitle>@EditingEntity.SiteName</ModalTitle>
                <CloseButton Clicked="CloseEditModalAsync" />
            </ModalHeader>
            <ModalBody>
                <Validations @ref="@EditValidationsRef" Model="@EditingEntity" ValidateOnLoad="false">
                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L[HomeSystemResource.Features.PasswordBook.DTFX.Columns.SiteName]</FieldLabel>
                            <TextEdit @bind-Text="@EditingEntity.SiteName">
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </TextEdit>
                        </Field>
                        <Field>
                            <FieldLabel>@L[HomeSystemResource.Features.PasswordBook.DTFX.Columns.SiteURL]</FieldLabel>
                            <TextEdit @bind-Text="@EditingEntity.SiteURL">
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </TextEdit>
                        </Field>
                        <Field>
                            <FieldLabel>@L[HomeSystemResource.Features.PasswordBook.DTFX.Columns.LoginAccount]</FieldLabel>
                            <TextEdit @bind-Text="@EditingEntity.LoginAccount">
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </TextEdit>
                        </Field>
                        <Field>
                            <FieldLabel>@L[HomeSystemResource.Features.PasswordBook.DTFX.Columns.Password]</FieldLabel>
                            <TextEdit @bind-Text="@EditingEntity.Password" Role="TextRole.Password">
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>
                    <Field>
                        <Switch TValue="bool" @bind-Checked="EditingEntity.IsHistory">@L[HomeSystemResource.Features.PasswordBook.DTFX.Columns.IsHistory]</Switch>
                    </Field>
                    <Divider />
                    <ExtraPropertyEditor TItem="PasswordStoreDto" Data="EditingEntity"></ExtraPropertyEditor>
                </Validations>
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary"
                        Clicked="CloseEditModalAsync">
                    @L[HomeSystemResource.Buttons.Cancel]
                </Button>
                <Button Color="Color.Primary"
                        Type="@ButtonType.Submit"
                        PreventDefaultOnSubmit="true"
                        Clicked="UpdateEntityAsync">
                    @L[HomeSystemResource.Buttons.Save]
                </Button>
            </ModalFooter>
        </Form>
    </ModalContent>
</Modal>

@code {
    private bool isAuth = false;

    protected async override Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        isAuth = await authorizationService.IsGrantedAsync("HomeSystem.PasswordBook.Special");
    }
}
